snippet "{$" "match braces" r
{
	$0
}
endsnippet

# 
# normal snips
#

snippet if "if statement" b
if ($1) {
	$2
}
${4:else {
	$3
}}
endsnippet

snippet for "usual for statement" b
for (int ${1:i} = 0; $1 < $2; ++$1) {
	$0
}
endsnippet

snippet while "while statement" b
while ($1) {
	$0
}
endsnippet

snippet do "do-while statement" b
do {
	$0
} while ($1);
endsnippet

snippet sw "switch statement" b
switch ($1) {
	default:
		$0
}
endsnippet

snippet sysout "system.out.println shortcut" b
System.out.println($1);
endsnippet

snippet syserr "system.err.println shortcut" b
System.err.println($1);
endsnippet

snippet func "function without documentation"
${1:private} ${2:static }${3:void} ${4:function_name} (${5})
{
	$0
	`!p snip.rv = "return;" if t[3] == "void" else "return 0;"`
}
endsnippet

snippet class "class boilerplate" b
${1:public} class ${2:Class} ${3:extends ${4:Parent_Class}}
{
	${5:/* variables */}

	public $2 ()
	{
		$0
	}
}
endsnippet

# create a class with the file's name
snippet main "create the main class of a file"
public class ${1:`!p snip.rv = snip.basename`}
{
	public static void main (String args[])
	{
		$0
		return 0;
	}
}
endsnippet

# dot-complete documentation FIXME:
snippet "\b(.+?)\s*(\w+)\s*\((.*?)\).doc" "generate function documentation" r
/** `!p snip.rv = match.group(2)`:
 * $1`!p 
import re
p = re.compile("(\w+)\s*,");
args = p.findall(match.group(3) + ",")
if len(t[1]) > 0:
	snip += " * "
if not (len(args) == 1 and args[0] == "void"):
	for arg in args:
		snip += " * @param " + arg + " "
if match.group(1).find("void") != -1 and match.group(1).find("*") == -1:
	snip.rv
else:
	snip += " * @return "
`$2
 */
`!p 
if match.group(1).endswith('*'):
	snip.rv = match.group(1)
else:
	snip.rv = match.group(1) + " "
snip.rv += match.group(2) + " (" + match.group(3) + ")"`
endsnippet
