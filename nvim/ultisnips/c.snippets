#
# automatic snippets
#

# snippet "{$" "auto-match braces" rA
# {
# 	$0
# }
# endsnippet
snippet "{$" "match braces" r
{
	$0
}
endsnippet

# snippet /* "comment start" bA
# /*$1 `!p
# if "\n" in t[1]:
# 	snip.rv = "\n */"
# else:
# 	snip.rv = " */"` $0
# endsnippet


# 
# normal snips
#

snippet if "if statement" b
if ($1) {
	$2
}
${4:else {
	$3
}}
endsnippet

snippet ffor "usual for statement" b
for (${1:i} = 0; $1 < $2; ++$1) {
	$3
}
$0
endsnippet

snippet while "while statement" b
while ($1) {
	$0
}
endsnippet

snippet do "do-while statement" b
do {
	$0
} while ($1);
endsnippet

snippet sw "switch statement" b
switch ($1) {
	default:
		$0
}
endsnippet

snippet func "function without documentation"
${1:static }${2:int} ${3:function_name} (${4:void})
{
	$0
	`!p snip.rv = "return;" if t[1] == "void" else "return 0;"`
}
endsnippet

snippet ret "check the result of a function call"
ret = ${1:call}(${2:args})
if (${3:ret == -1}) {
	${5:perror("$1");
	${4:return ret};}
}
endsnippet

snippet hdr "header file boilerplate"
#ifndef ${1:`!p snip.rv = "__INCLUDE_" + snip.basename.upper() + "_H"`}
#define $1

$0

#endif /* $1 */
endsnippet

snippet struct "struct declaration"
struct $1 {
	$0
};
endsnippet

snippet create "*_create boilerplate"
${1:static }int ${2:type}_init (struct $2 *${3:local_name}`!p snip.rv = '' if t[4] is '' else ', '`${4:args})
{
	// TODO: check args

	assert($3);
	if (!$3)
		return -1;

	// TODO: init

	return 0;
}

$1void $2_stop (struct $2 *$3)
{
	// TODO: stop
}

$1struct $2 *$2_create (`!p snip.rv = 'void' if t[4] is '' else t[4]`)
{
	struct $2 *$3;

	$3 = malloc(sizeof(struct $2));
	if (!$3) {
		perror("$2_create, malloc");
		goto err;
	}

	if ($2_init($3`!p
s = ''
if t[4] is not '':
	arglist = t[4].split(',')
	for arg in arglist:
		split = arg.split()
		if split is ['']:
			continue
		s += ', ' + split[-1].lstrip('*')
snip.rv = s`) != 0)
		goto err_free;

	return $3;
err_free:
	free($3);
err:
	return NULL;
}

$1void $2_destroy (struct $2 *$3)
{
	assert($3);
	$2_stop($3);
	if ($3)
		free($3);
}
endsnippet

snippet open "open syscall" b
${1:fd} = open(${2:filename}, ${3:O_RDRW});
if ($1 < 0) {
	err = errno;
	perror("open");
	goto ${4:err};
}
endsnippet


# 
# dot-completion snippets
#

snippet "(^.*?)\s*(\w+)\s*\((.*?)\).doc" "generate function documentation" r
/** `!p snip.rv = match.group(2)`:
 * $1`!p 
import re
p = re.compile("(\w+)\s*,");
args = p.findall(match.group(3) + ",")
if len(t[1]) > 0:
	snip.rv = "\n *"
if not (len(args) == 1 and args[0] == "void"):
	for arg in args:
		snip.rv += "\n * @" + arg + ": "
if match.group(1).find("void") != -1 and match.group(1).find("*") == -1:
	snip.rv
else:
	snip.rv += "\n * @return: "
`$2
 */
`!p 
if match.group(1).endswith('*'):
	snip.rv = match.group(1)
else:
	snip.rv = match.group(1) + " "
snip.rv += match.group(2) + " (" + match.group(3) + ")"`
endsnippet

# snippet trigger "description" options
# endsnippet
